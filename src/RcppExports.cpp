// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bs_block
arma::cx_cube bs_block(const arma::mat& ys, const arma::vec& w, const arma::vec& freq, const arma::vec& band, const arma::uvec& band_ind, int R, int B, int L, bool coherency);
RcppExport SEXP _SpecCp_bs_block(SEXP ysSEXP, SEXP wSEXP, SEXP freqSEXP, SEXP bandSEXP, SEXP band_indSEXP, SEXP RSEXP, SEXP BSEXP, SEXP LSEXP, SEXP coherencySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type band(bandSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type band_ind(band_indSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< bool >::type coherency(coherencySEXP);
    rcpp_result_gen = Rcpp::wrap(bs_block(ys, w, freq, band, band_ind, R, B, L, coherency));
    return rcpp_result_gen;
END_RCPP
}
// bs_consecutive
arma::cx_cube bs_consecutive(const arma::mat& ys, const arma::vec& w, const arma::vec& freq, const arma::vec& band, const arma::uvec& band_ind, const arma::uvec& at, const arma::mat& projections, int R, int L, bool coherency);
RcppExport SEXP _SpecCp_bs_consecutive(SEXP ysSEXP, SEXP wSEXP, SEXP freqSEXP, SEXP bandSEXP, SEXP band_indSEXP, SEXP atSEXP, SEXP projectionsSEXP, SEXP RSEXP, SEXP LSEXP, SEXP coherencySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type band(bandSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type band_ind(band_indSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type at(atSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type projections(projectionsSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< bool >::type coherency(coherencySEXP);
    rcpp_result_gen = Rcpp::wrap(bs_consecutive(ys, w, freq, band, band_ind, at, projections, R, L, coherency));
    return rcpp_result_gen;
END_RCPP
}
// cusum_symm_tensor
arma::cube cusum_symm_tensor(const arma::cube& z);
RcppExport SEXP _SpecCp_cusum_symm_tensor(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(cusum_symm_tensor(z));
    return rcpp_result_gen;
END_RCPP
}
// cusum_vec
NumericVector cusum_vec(const arma::vec& z);
RcppExport SEXP _SpecCp_cusum_vec(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(cusum_vec(z));
    return rcpp_result_gen;
END_RCPP
}
// mysd
NumericVector mysd(NumericVector x);
RcppExport SEXP _SpecCp_mysd(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mysd(x));
    return rcpp_result_gen;
END_RCPP
}
// powerIteration0
List powerIteration0(const arma::mat& X, int k, Nullable<NumericVector> v1_init, int max_iter, double lambda_diff_threshold, bool trace);
RcppExport SEXP _SpecCp_powerIteration0(SEXP XSEXP, SEXP kSEXP, SEXP v1_initSEXP, SEXP max_iterSEXP, SEXP lambda_diff_thresholdSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type v1_init(v1_initSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_diff_threshold(lambda_diff_thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(powerIteration0(X, k, v1_init, max_iter, lambda_diff_threshold, trace));
    return rcpp_result_gen;
END_RCPP
}
// mytruncate
NumericVector mytruncate(NumericVector x, int s);
RcppExport SEXP _SpecCp_mytruncate(SEXP xSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(mytruncate(x, s));
    return rcpp_result_gen;
END_RCPP
}
// unfold_tnsr
arma::mat unfold_tnsr(const arma::cube& tnsr, int mode);
RcppExport SEXP _SpecCp_unfold_tnsr(SEXP tnsrSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type tnsr(tnsrSEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(unfold_tnsr(tnsr, mode));
    return rcpp_result_gen;
END_RCPP
}
// ttl_rcpp
arma::cube ttl_rcpp(arma::cube tnsr, List list_mat, IntegerVector ms);
RcppExport SEXP _SpecCp_ttl_rcpp(SEXP tnsrSEXP, SEXP list_matSEXP, SEXP msSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type tnsr(tnsrSEXP);
    Rcpp::traits::input_parameter< List >::type list_mat(list_matSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ms(msSEXP);
    rcpp_result_gen = Rcpp::wrap(ttl_rcpp(tnsr, list_mat, ms));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SpecCp_bs_block", (DL_FUNC) &_SpecCp_bs_block, 9},
    {"_SpecCp_bs_consecutive", (DL_FUNC) &_SpecCp_bs_consecutive, 10},
    {"_SpecCp_cusum_symm_tensor", (DL_FUNC) &_SpecCp_cusum_symm_tensor, 1},
    {"_SpecCp_cusum_vec", (DL_FUNC) &_SpecCp_cusum_vec, 1},
    {"_SpecCp_mysd", (DL_FUNC) &_SpecCp_mysd, 1},
    {"_SpecCp_powerIteration0", (DL_FUNC) &_SpecCp_powerIteration0, 6},
    {"_SpecCp_mytruncate", (DL_FUNC) &_SpecCp_mytruncate, 2},
    {"_SpecCp_unfold_tnsr", (DL_FUNC) &_SpecCp_unfold_tnsr, 2},
    {"_SpecCp_ttl_rcpp", (DL_FUNC) &_SpecCp_ttl_rcpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_SpecCp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
